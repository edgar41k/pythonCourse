import re


# 1. Напишите регулярное выражение для поиска HTML-цвета, заданного как #ABCDEF, то есть # и содержит затем 6 шестнадцатеричных символов.
# 	HASH цвета используют значения от 0 до 15, где 0-9 цифры от нуля до 9, 10-15 буквы от A-F.

# 2. Создать запрос для определения в тексте цифр, за которыми не стоит знак +. (Примеры выражений “2*9-6*5” или (3+5)-9*4)

# 3. Найти в тексте время. Время имеет формат часы:минуты. И часы, и минуты состоят из двух цифр, пример: 09:00. Напишите регулярное выражение для поиска времени в строке: «Завтрак в 09:00». Учтите, что «37:98» – некорректное время. [00:00 - 23:59]

# 4. Написать программу котороая будет выбирать из файла people.txt:
# 	1) Все имена и фамилии
# 	2) Все адреса

# 5. Написать регулярное выражение для проверки строки, задача определить состоит ли строка из символов a-z, A-Z, 0-9.

# 6. Написать регулярное выражение для определения эстонского личного кода (isikukood)

# Все строки произвольные.


#1
# Напишите регулярное выражение для поиска HTML-цвета, заданного как #ABCDEF, то есть # и 6 шестнадцатеричных символов.
# Текст для поиска
# text_to_search = """
# #123ABC
# #ABCDEF
# #A1B2C3
# 123456
# #GHIJKL
# #12345G
# #abcdef
# """

# Регулярное выражение для поиска HTML-цветов
# pattern = re.compile(r'#[0-9A-Fa-f]{6}')

# Поиск всех совпадений
# matches = pattern.finditer(text_to_search)

# Вывод совпадений
# print("Найденные HTML-цвета:")
# for match in matches:
#     print(match.group())


#2
# Создать запрос для определения в тексте цифр, за которыми не стоит знак +.
# text_to_search = """
# (“2*9-6*5” или (3+5)-9*4)
# (3+5)-9*4
# (2*9-6*5) - (2*9-6*5)
# (0.334+0.555)-0.4445 (0.334+0.555)-0.4445)
# (5673+5567)-9*4
# (35689+45636)-14560
# (3337+55467)-7456
# (3345345+534534654)-9456
# """

# parts = re.split(r'\+', text_to_search)

# for part in parts:
#     if re.search(r'\d+(?!\.\d*)', part):
#         print(re.search(r'\d+(?!\.\d*)', part).group())


#3
# Найти в тексте время.
# text_to_search = """
# Завтрак в 09:00.
# Обед в 12:00.
# Ужин в 25:99.
# Полдник в 18:30.
# Корректное время: 18:30.
# Некорректное время: 37:98.
# """

# Регулярное выражение для времени (ЧЧ:ММ) в пределах от 00:00 до 23:59
# pattern = re.compile(r'([01]\d|2[0-3]):([0-5]\d)')

# matches = pattern.finditer(text_to_search)
# for match in matches:
#     print(match.group())


#4
# Написать программу котороая будет выбирать из файла people.txt:
# 	1) Все имена и фамилии
# 	2) Все адреса
# Открываем файл и читаем его содержимое
# with open('data.txt', 'r', encoding='utf-8') as file:
#     content = file.read()

# Регулярное выражение для поиска имен и фамилий (имя и фамилия начинаются с заглавной буквы)
# names_pattern = r'# ([A-Z][a-z]+(?: [A-Z][a-z]+)+)'
# Регулярное выражение для поиска адресов (адрес начинается с номера и содержит улицу и город)
# addresses_pattern = r'# (\d+ .+, .+ \w{2} \d{5})'

# Находим все совпадения
# names = re.findall(names_pattern, content)
# addresses = re.findall(addresses_pattern, content)

# Выводим имена и фамилии
# print("Names and surnames:")
# for name in names:
#     print(name)

# Выводим адреса
# print("\nAddress:")
# for address in addresses:
#     print(address)


#5
# Написать регулярное выражение для проверки строки, задача определить состоит ли строка из символов a-z, A-Z, 0-9
# text_to_search = """
# abc
# 123
# ABC123xyz
# abc123!
# """

# Регулярное выражение для проверки, что строка состоит только из символов a-z, A-Z и 0-9
# pattern = re.compile(r'^[a-zA-Z0-9]+$')

# Разбиваем текст на строки
# lines = text_to_search.splitlines()

# Проверяем каждую строку
# for line in lines:
#     if pattern.match(line):
#         print(f"Строка '{line}' состоит только из символов a-z, A-Z, 0-9")
#     else:
#         print(f"Строка '{line}' содержит недопустимые символы")


#6
# Написать регулярное выражение для определения эстонского личного кода (isikukood)
pattern = re.compile(r'^[1-6]\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d{4}$')

# Примеры личных кодов
# isikukood_list = [
#     "50309292764",  # Корректный
#     "61212310001",  # Корректный
#     "70000000000",  # Некорректный (первая цифра должна быть от 1 до 6)
#     "50101310001",  # Некорректный месяц 13
#     "50202290001",  # Некорректный день 29 для месяца 02 (без учёта высокосных годов)
#     "50300010001",  # Некорректный месяц 00
#     "50309310001",  # Некорректный день 31 для месяца 09 (но допустим)
#     "50309990001",  # Некорректный день 99
# ]

# Проверка каждого личного кода
# for isikukood in isikukood_list:
#     if pattern.match(isikukood):
#         print(f"Личный код {isikukood} корректен по формату.")
#     else:
#         print(f"Личный код {isikukood} некорректен по формату.")



