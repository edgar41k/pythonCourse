import re


# 1. Напишите регулярное выражение для поиска HTML-цвета, заданного как #ABCDEF, то есть # и содержит затем 6 шестнадцатеричных символов.
# 	HASH цвета используют значения от 0 до 15, где 0-9 цифры от нуля до 9, 10-15 буквы от A-F.

# 2. Создать запрос для определения в тексте цифр, за которыми не стоит знак +. (Примеры выражений “2*9-6*5” или (3+5)-9*4)

# 3. Найти в тексте время. Время имеет формат часы:минуты. И часы, и минуты состоят из двух цифр, пример: 09:00. Напишите регулярное выражение для поиска времени в строке: «Завтрак в 09:00». Учтите, что «37:98» – некорректное время. [00:00 - 23:59]

# 4. Написать программу котороая будет выбирать из файла people.txt:
# 	1) Все имена и фамилии
# 	2) Все адреса

# 5. Написать регулярное выражение для проверки строки, задача определить состоит ли строка из символов a-z, A-Z, 0-9.

# 6. Написать регулярное выражение для определения эстонского личного кода (isikukood)

# Все строки произвольные.


#1
# Напишите регулярное выражение для поиска HTML-цвета, заданного как #ABCDEF, то есть # и содержит затем 6 шестнадцатеричных символов.
# text_to_search = """
# 1234567890
# abcdefghijkl
# asdfasdgfsedfghsd
# 23442fdedf45364dfge3453
# 2354345fds1234567890fe345345dsfge3453
# 354345fdsfe345345dsfge3453asasdf
# 354345f1234567890dsfe345345dsfge3453asdfas
# 354345fdsfe345345dsfge3453asdfas
# 354345fdsfe345345dsfge3453asasdf
# 354345fdsfe345345dsfge3453asdfas
# 354345fdsfe345345dsfge3453asdfas
# """

# pattern = re.compile(r'[0-9A-Fa-f]{6}')
# matches = pattern.finditer(text_to_search)

# for match in matches:   
#     print(match.group()) 
    # match.group() выводит только совпадения, а не объекты re.Match


#2
# Создать запрос для определения в тексте цифр, за которыми не стоит знак +.
# text_to_search = """
# (“2*9-6*5” или (3+5)-9*4)
# (3+5)-9*4
# (2*9-6*5) - (2*9-6*5)
# (0.334+0.555)-0.4445 (0.334+0.555)-0.4445)
# (5673+5567)-9*4
# (35689+45636)-14560
# (3337+55467)-7456
# (3345345+534534654)-9456
# """

# parts = re.split(r'\+', text_to_search)

# for part in parts:
#     if re.search(r'\d+(?!\.\d*)', part):
#         print(re.search(r'\d+(?!\.\d*)', part).group())


#3
# Найти в тексте время.
# text_to_search = """
# Завтрак в 09:00.
# Обед в 12:00.
# Ужин в 18:00.
# """

# pattern = re.compile(r'(\d{2}:\d{2})')
# (\d{2}:\d{2}): 
# Это группа, которая содержит два набора цифр, разделенных двоеточием.
# \d{2}: Это набор из двух цифр. 
# \d представляет собой любую цифру от 0 до 9, 
# а {2} указывает, что должно быть ровно две цифры.
# : Это двоеточие, которое отделяет часы от минут
# \d{2}: Это второй набор из двух цифр, 
# который представляет собой минуты.
# matches = pattern.finditer(text_to_search)

# for match in matches:
#     print(match.group())


#4
# Написать программу котороая будет выбирать из файла people.txt:
# 	1) Все имена и фамилии
# 	2) Все адреса
# Открываем файл и читаем его содержимое
# with open('data.txt', 'r', encoding='utf-8') as file:
#     content = file.read()

# Регулярное выражение для поиска имен и фамилий (имя и фамилия начинаются с заглавной буквы)
# names_pattern = r'# ([A-Z][a-z]+(?: [A-Z][a-z]+)+)'
# Регулярное выражение для поиска адресов (адрес начинается с номера и содержит улицу и город)
# addresses_pattern = r'# (\d+ .+, .+ \w{2} \d{5})'

# Находим все совпадения
# names = re.findall(names_pattern, content)
# addresses = re.findall(addresses_pattern, content)

# Выводим имена и фамилии
# print("Names and surnames:")
# for name in names:
#     print(name)

# Выводим адреса
# print("\nAddress:")
# for address in addresses:
#     print(address)

#5
# Написать регулярное выражение для проверки строки, задача определить состоит ли строка из символов a-z, A-Z, 0-9

# text_to_search = """
# abc
# 123
# ABC123xyz
# abc123!
# """

# Регулярное выражение для проверки, что строка состоит только из символов a-z, A-Z и 0-9
# pattern = re.compile(r'^[a-zA-Z0-9]+$')

# Разбиваем текст на строки
# lines = text_to_search.splitlines()

# Проверяем каждую строку
# for line in lines:
#     if pattern.match(line):
#         print(f"Строка '{line}' состоит только из символов a-z, A-Z, 0-9")
#     else:
#         print(f"Строка '{line}' содержит недопустимые символы")

#6
# Написать регулярное выражение для определения эстонского личного кода (isikukood)

# Регулярное выражение для личного кода isikukood
# pattern = re.compile(r'^[1-6]\d{2}[01]\d[0-3]\d\d{4}$')

# Пример личного кода
# isikukood = "50309292764"

# Проверка
# if pattern.match(isikukood):
#     print(f"Личный код {isikukood} корректен по формату.")
# else:
#     print(f"Личный код {isikukood} некорректен по формату.")



# Регулярное выражение для личного кода isikukood
# pattern = re.compile(r'^[1-6]\d{2}[01]\d[0-3]\d\d{4}$')

# Запрос на ввод личного кода
# isikukood = input("Введите личный код (isikukood): ")

# # Проверка формата введённого кода
# if pattern.match(isikukood):
#     print(f"Личный код {isikukood} корректен по формату.")
# else:
#     print(f"Личный код {isikukood} некорректен по формату.")


# Регулярное выражение для личного кода isikukood
# pattern = re.compile(r'^[1-6]\d{2}[01]\d[0-3]\d\d{4}$')

# Цикл для проверки корректности кода
# while True:
#     # Запрос на ввод личного кода
#     isikukood = input("Введите личный код (isikukood): ")
    
#     # Проверка формата введённого кода
#     if pattern.match(isikukood):
#         print(f"Личный код {isikukood} корректен по формату.")
#         break  # Прерывание цикла, если код корректен
#     else:
#         print(f"Личный код {isikukood} некорректен, попробуйте снова.")


